# プロジェクト進行に関するルール

## 目的
このドキュメントは、プロジェクトを円滑に進行させるための標準的なプロセス、役割分担、コミュニケーション方法を定義します。

## プロジェクト体制

### 役割定義

#### プロダクトオーナー（PO）
- プロダクトビジョンの策定と共有
- バックログの優先順位付け
- ステークホルダーとの調整
- リリース判断

#### スクラムマスター（SM）
- スクラムプロセスの推進
- 障害の除去
- チームの自己組織化支援
- 継続的改善の促進

#### 開発チーム
- 技術的意思決定
- 実装とテスト
- ドキュメント作成
- 相互レビュー

#### テックリード
- 技術的方向性の決定
- アーキテクチャ設計
- 技術的課題の解決
- メンバーの技術指導

## スプリント運営

### スプリント構成
- **期間**: 2週間（10営業日）
- **開始日**: 月曜日
- **終了日**: 金曜日

### スプリントイベント

#### 1. スプリントプランニング（Day 1）
**時間**: 2時間
**参加者**: 全員
**アジェンダ**:
1. スプリントゴールの設定（30分）
2. バックログアイテムの選択（60分）
3. タスクブレークダウン（30分）

**成果物**:
- スプリントゴール
- スプリントバックログ
- 各タスクの見積もり

#### 2. デイリースクラム（毎日）
**時間**: 15分
**参加者**: 開発チーム
**フォーマット**:
- 昨日やったこと
- 今日やること
- 障害・課題

**ルール**:
- 時間厳守
- 議論は別途実施
- 全員スタンディング

#### 3. スプリントレビュー（最終日）
**時間**: 1時間
**参加者**: 全員 + ステークホルダー
**内容**:
- 完成した機能のデモ
- フィードバック収集
- プロダクトバックログの調整

#### 4. スプリントレトロスペクティブ（最終日）
**時間**: 1時間
**参加者**: 開発チーム + SM
**フォーマット**: KPT（Keep/Problem/Try）
- Keep: 継続すべき良い点
- Problem: 改善すべき課題
- Try: 次に試すこと

## バックログ管理

### プロダクトバックログ
- **優先度**: MoSCoW法（Must/Should/Could/Won't）
- **見積もり**: ストーリーポイント（フィボナッチ数列）
- **詳細度**: 優先度が高いものほど詳細に

### ユーザーストーリー
```
As a [ユーザータイプ]
I want [機能・要望]
So that [価値・理由]

受け入れ条件:
- [ ] 条件1
- [ ] 条件2
- [ ] 条件3
```

### Definition of Ready（着手可能条件）
- [ ] ユーザーストーリーが明確
- [ ] 受け入れ条件が定義済み
- [ ] 見積もり完了
- [ ] 技術的依存関係が解決済み
- [ ] デザイン/モックアップ準備完了

### Definition of Done（完了条件）
- [ ] コード実装完了
- [ ] ユニットテスト作成・パス
- [ ] コードレビュー完了
- [ ] 統合テストパス
- [ ] ドキュメント更新
- [ ] デプロイ可能な状態

## コミュニケーション

### コミュニケーションツール
1. **Slack**
   - 日常的なコミュニケーション
   - 緊急連絡
   - 簡単な質問・相談

2. **GitHub/GitLab**
   - コードレビュー
   - 技術的議論
   - イシュー管理

3. **Jira/Trello**
   - タスク管理
   - 進捗追跡
   - バックログ管理

4. **Confluence/Notion**
   - ドキュメント管理
   - 議事録
   - ナレッジベース

### 会議ルール

#### 効率的な会議運営
1. **事前準備**
   - アジェンダの事前共有
   - 必要資料の事前配布
   - 参加者の厳選

2. **会議中**
   - 時間厳守（開始・終了）
   - 1つの議題に集中
   - アクションアイテムの明確化

3. **会議後**
   - 議事録の即日共有
   - アクションアイテムのチケット化
   - 次回までのフォローアップ

### エスカレーション

#### レベル1: チーム内解決
- 技術的課題
- 軽微なスケジュール調整
- リソース配分

#### レベル2: PO/SM介入
- 要件の大幅変更
- スプリントゴール達成困難
- チーム間調整

#### レベル3: ステークホルダー介入
- プロジェクトスコープ変更
- 重大なリスク発生
- 予算・期限の見直し

## リスク管理

### リスクの識別
- 週次でリスクレビュー実施
- リスクレジスター更新
- 早期警告指標の設定

### リスクマトリクス
```
影響度 ↑
高 | 転嫁 | 回避 | 回避 |
中 | 受容 | 軽減 | 転嫁 |
低 | 受容 | 受容 | 軽減 |
    低    中    高  → 発生確率
```

### 対応戦略
1. **回避**: リスクを発生させない
2. **転嫁**: リスクを他者に移転
3. **軽減**: 影響や確率を低減
4. **受容**: リスクを受け入れる

## 品質管理

### 品質メトリクス
- **コードカバレッジ**: 80%以上
- **バグ密度**: 1,000行あたり5件以下
- **技術的負債**: 継続的に削減
- **顧客満足度**: NPS 30以上

### 継続的改善
- スプリントごとの振り返り
- 四半期ごとの大規模レビュー
- 年次の技術棚卸し

## リリース管理

### リリースサイクル
- **本番リリース**: 月1回（第3金曜日）
- **ステージングリリース**: 週2回（火・木）
- **ホットフィックス**: 随時

### リリースプロセス
1. **リリース候補作成**
   - feature freeze
   - リリースブランチ作成
   - リリースノート作成

2. **品質保証**
   - 回帰テスト実施
   - パフォーマンステスト
   - セキュリティチェック

3. **承認プロセス**
   - QAチーム承認
   - PO承認
   - 運用チーム準備確認

4. **デプロイ**
   - 段階的ロールアウト
   - モニタリング強化
   - ロールバック準備

### リリースノート
```markdown
# Release v1.2.0 (2024-01-15)

## 新機能
- ユーザープロファイル編集機能
- 通知設定のカスタマイズ

## 改善
- ログイン処理の高速化
- UIレスポンシブ対応強化

## バグ修正
- #123: 検索結果の表示不具合
- #124: セッションタイムアウト処理

## 既知の問題
- IE11でのレイアウト崩れ（次回対応予定）
```

## ドキュメント管理

### ドキュメント体系
1. **プロジェクト文書**
   - プロジェクト憲章
   - スコープ定義書
   - WBS

2. **技術文書**
   - アーキテクチャ設計書
   - API仕様書
   - データベース設計書

3. **運用文書**
   - デプロイ手順書
   - 障害対応手順書
   - 監視設定書

### 更新ルール
- 重要な変更は必ずドキュメント反映
- レビューとバージョン管理
- 定期的な棚卸し（四半期ごと）

## 成功指標（KPI）

### プロジェクトKPI
- **ベロシティ**: 安定または向上傾向
- **スプリント達成率**: 80%以上
- **リードタイム**: 5日以内
- **サイクルタイム**: 3日以内

### 品質KPI
- **本番障害数**: 月3件以下
- **MTTR**: 4時間以内
- **カスタマーサポート問い合わせ**: 減少傾向

### チームKPI
- **チーム満足度**: 4.0/5.0以上
- **知識共有セッション**: 月2回以上
- **改善提案数**: スプリント3件以上