---
description: 
globs: 
alwaysApply: false
---
# タスクコントロール・プロジェクト管理ガイダンス

このファイルは、プロジェクト「kifu-app」におけるタスク管理、進捗管理、およびプロジェクトコントロールに関するガイダンスを提供します。

## プロジェクト管理体制

### 役割定義
- **プロダクトオーナー**：要件定義、優先度決定
- **テックリード**：技術選択、アーキテクチャ設計
- **開発者**：実装、テスト、コードレビュー
- **QAエンジニア**：品質保証、テスト実行

### コミュニケーション
- **日次ステータス**：毎日の進捗共有
- **週次レビュー**：週単位での振り返り
- **スプリント計画**：2週間スプリントでの計画・実行

## タスク管理手法

### イシュー管理
```
機能要求 → Epic → Story → Task → Sub-task
```

#### Epic（大機能）例
- ユーザー認証システム
- 決済システム
- プロジェクト管理機能

#### Story（ユーザーストーリー）例
```
As a [ユーザー種別]
I want [実現したいこと]
So that [達成したい目標]

例：
As a 寄付者
I want プロジェクト一覧を見る
So that 支援したいプロジェクトを見つけられる
```

#### Task（開発タスク）例
- コンポーネント作成
- API実装
- テスト作成
- デザイン調整

### 優先度管理

#### MoSCoW法
- **Must have**：必須機能（MVP含む）
- **Should have**：重要機能（次回リリース）
- **Could have**：あれば良い機能
- **Won't have**：今回は対象外

#### 優先度判定基準
1. **ビジネス価値**（1-5点）
2. **技術的複雑さ**（1-5点）
3. **リスク**（1-5点）
4. **依存関係**（あり/なし）

## スプリント管理

### スプリント期間
- **2週間スプリント**を基本とする
- 祝日等を考慮した柔軟な調整

### スプリント計画プロセス
1. **バックログリファインメント**（スプリント開始1週間前）
   - ストーリーの詳細化
   - 見積もり更新
   - 受け入れ条件明確化

2. **スプリント計画ミーティング**（スプリント開始日）
   - スプリントゴール設定
   - タスク選択・割り当て
   - キャパシティ確認

3. **デイリースタンドアップ**（毎日15分）
   - 昨日の実績
   - 今日の予定
   - 課題・ブロッカー

4. **スプリントレビュー**（スプリント最終日）
   - 完成機能のデモ
   - ステークホルダーフィードバック

5. **スプリント振り返り**（スプリント最終日）
   - Keep：続けること
   - Problem：問題・課題
   - Try：改善案

### 見積もり手法

#### ストーリーポイント
- **1ポイント**：1-2時間（簡単な修正）
- **2ポイント**：半日（小さな機能追加）
- **3ポイント**：1日（通常の機能実装）
- **5ポイント**：2-3日（複雑な機能）
- **8ポイント**：1週間（大きな機能）
- **13ポイント**：分割が必要

#### プランニングポーカー
- チーム全員で見積もり
- 相対見積もりによる精度向上
- 不一致時の議論によるリスク洗い出し

## 進捗管理・監視

### KPI（重要業績評価指標）

#### 開発KPI
- **ベロシティ**：スプリントあたりの完了ストーリーポイント
- **リードタイム**：要求から本番リリースまでの時間
- **サイクルタイム**：開発開始から完了までの時間
- **バグ密度**：リリース後発見バグ数/機能数

#### 品質KPI
- **コードカバレッジ**：80%以上維持
- **テスト合格率**：95%以上
- **レビュー指摘件数**：PR当たり平均5件以下
- **技術的負債**：定期的な測定・改善

### ダッシュボード管理
```
週次ダッシュボード内容：
├── スプリント燃焼チャート
├── バックログの健全性
├── バグトレンド
├── コードメトリクス
└── チームキャパシティ
```

## リスク管理

### 技術的リスク
- **新技術習得**：学習時間の確保
- **パフォーマンス**：負荷テスト実施
- **セキュリティ**：定期的な脆弱性診断
- **依存関係**：サードパーティライブラリの更新

### プロジェクトリスク
- **スコープクリープ**：要件変更管理プロセス
- **リソース不足**：バッファ時間の確保
- **外部依存**：代替案の検討
- **品質低下**：品質ゲートの設定

### リスク対応プロセス
1. **リスク識別**：定期的なリスクアセスメント
2. **影響度評価**：発生確率×影響度でスコアリング
3. **対応策策定**：回避・軽減・転嫁・受容
4. **継続監視**：週次でリスク状況確認

## 品質管理

### Definition of Done（完了の定義）
- [ ] 機能実装完了
- [ ] 単体テスト実装・合格
- [ ] コードレビュー完了
- [ ] 結合テスト合格
- [ ] パフォーマンス要件クリア
- [ ] セキュリティチェック完了
- [ ] ドキュメント更新
- [ ] ステークホルダー承認

### 品質ゲート
#### マージ前チェック
- ESLint/TypeScript エラー0件
- テストカバレッジ要件達成
- パフォーマンス基準クリア

#### リリース前チェック
- 全E2Eテスト合格
- セキュリティスキャン完了
- パフォーマンステスト合格

## ツール・プラットフォーム

### 推奨ツール
- **プロジェクト管理**：GitHub Issues/Projects、Notion
- **コミュニケーション**：Slack、Discord
- **CI/CD**：GitHub Actions
- **監視・分析**：Vercel Analytics、Sentry

### 自動化対象
- コードフォーマット（Prettier）
- リンティング（ESLint）
- テスト実行（Jest/Playwright）
- デプロイメント（Vercel）
- 依存関係更新（Dependabot）

## トラブルシューティング・エスカレーション

### 課題解決フロー
1. **自己解決**：15分ルール（15分で解決しない場合はヘルプ）
2. **チーム内相談**：ペアプログラミング、技術相談
3. **外部相談**：Stack Overflow、技術コミュニティ
4. **エスカレーション**：テックリード、外部専門家

### クリティカル課題対応
- **本番障害**：即座にテックリードに連絡
- **セキュリティ問題**：24時間以内の対応
- **データ喪失リスク**：即座に作業停止・バックアップ確認

### 定期レビュー
- **月次**：プロジェクト全体の健全性確認
- **四半期**：目標達成度評価、プロセス改善
- **半年**：技術スタック見直し、アーキテクチャ評価
