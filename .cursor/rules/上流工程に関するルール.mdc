# 上流工程に関するルール

## 目的
このドキュメントは、プロジェクトの上流工程（要件定義・設計）における標準的なプロセスと成果物の定義を提供します。

## 要件定義フェーズ

### 1. ステークホルダー分析
- プロジェクトに関わる全てのステークホルダーを特定する
- 各ステークホルダーの期待値と懸念事項を明確化する
- コミュニケーションプランを策定する

### 2. 要件収集
- **機能要件**
  - ユーザーストーリー形式で記述する
  - 受け入れ条件を明確に定義する
  - 優先度（Must/Should/Could/Won't）を設定する

- **非機能要件**
  - パフォーマンス要件（レスポンスタイム、スループット）
  - セキュリティ要件
  - 可用性要件
  - 保守性要件
  - 拡張性要件

### 3. 要件分析
- 要件の整合性を確認する
- 技術的実現可能性を評価する
- リスクと制約を特定する
- 依存関係を明確化する

## 設計フェーズ

### 1. アーキテクチャ設計
- **システム構成図**
  - コンポーネント間の関係を明確化
  - データフローを図示
  - 外部システムとの連携を定義

- **技術選定**
  - 選定理由を明文化
  - 代替案との比較評価
  - PoC（概念実証）の実施計画

### 2. データ設計
- **ER図**の作成
- **データ辞書**の整備
- データライフサイクルの定義
- バックアップ・リカバリ戦略

### 3. インターフェース設計
- **API設計**
  - RESTful原則に従う
  - OpenAPI仕様書の作成
  - エラーハンドリングの標準化

- **UI/UX設計**
  - ワイヤーフレームの作成
  - デザインシステムの定義
  - アクセシビリティ要件の考慮

## ドキュメント管理

### 必須成果物
1. **要件定義書**
   - ビジネス要件
   - システム要件
   - 制約事項

2. **基本設計書**
   - システム構成
   - 機能一覧
   - 画面遷移図
   - ER図

3. **詳細設計書**
   - クラス図
   - シーケンス図
   - API仕様書

### バージョン管理
- 全てのドキュメントはGitで管理する
- 重要な変更時はレビューを必須とする
- 変更履歴を明確に記録する

## レビュープロセス

### デザインレビュー
- 設計完了時に必ず実施
- チェックリストを使用した体系的レビュー
- 指摘事項の追跡管理

### 承認プロセス
- ステークホルダーによる承認
- 承認記録の保管
- 変更時の再承認プロセス

## 品質基準

### 要件の品質
- **明確性**: 曖昧な表現を避ける
- **検証可能性**: 測定可能な基準を設定
- **一貫性**: 矛盾のない要件定義
- **完全性**: 必要な情報が網羅されている

### 設計の品質
- **モジュール性**: 高凝集・低結合
- **再利用性**: 共通コンポーネントの抽出
- **保守性**: 変更の影響範囲が限定的
- **テスト可能性**: テストしやすい設計

## 参考資料
- IEEE Std 830（ソフトウェア要求仕様の推奨プラクティス）
- ISO/IEC/IEEE 29148（要求工学）
- ドメイン駆動設計（DDD）の原則